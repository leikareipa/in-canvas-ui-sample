/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./src/wray/bvh.ts":
/*!*************************!*\
  !*** ./src/wray/bvh.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"aabb\": () => (/* binding */ aabb),\n/* harmony export */   \"bvh\": () => (/* binding */ bvh)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\nfunction aabb(mesh, isLeaf = false) {\n    const [min, max] = (() => {\n        let minX = Infinity, minY = Infinity, minZ = Infinity;\n        let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n        for (const triangle of mesh) {\n            for (const vertex of triangle.vertices) {\n                minX = Math.min(minX, vertex.x);\n                minY = Math.min(minY, vertex.y);\n                minZ = Math.min(minZ, vertex.z);\n                maxX = Math.max(maxX, vertex.x);\n                maxY = Math.max(maxY, vertex.y);\n                maxZ = Math.max(maxZ, vertex.z);\n            }\n        }\n        return [\n            _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(minX, minY, minZ),\n            _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(maxX, maxY, maxZ)\n        ];\n    })();\n    return {\n        min,\n        max,\n        isLeaf,\n        triangles: (isLeaf ? mesh : []),\n        mutable: {\n            left: null,\n            right: null,\n        },\n        volume() {\n            return ((2.0 * (max.z - min.z) * (max.x - min.x)) +\n                (2.0 * (max.z - min.z) * (max.y - min.y)) +\n                (2.0 * (max.x - min.x) * (max.y - min.y)));\n        },\n    };\n}\nfunction bvh(scene) {\n    const startTime = Date.now();\n    const baseAABB = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.aabb(scene, false);\n    const maxDepth = 30;\n    const minNumTris = 3;\n    (function split(parentAABB, mesh, depth = 0) {\n        if (parentAABB.isLeaf)\n            return;\n        {\n            const axesAvailable = [\"x\", \"y\", \"z\"];\n            const splitAxis = axesAvailable[depth % axesAvailable.length];\n            const leftMin = parentAABB.min;\n            const leftMax = (() => {\n                const numSplits = 5;\n                const costNodeIntersection = 1;\n                const costTriangleIntersection = 5;\n                let leftMax = parentAABB.max;\n                let lowestSplitCost = Infinity;\n                for (let i = 0; i < numSplits; i++) {\n                    const proposedSplitStart = (parentAABB.min[splitAxis] + ((parentAABB.max[splitAxis] - parentAABB.min[splitAxis]) * Math.random()));\n                    const proposedLeftMin = parentAABB.min;\n                    const proposedLeftMax = (() => {\n                        switch (splitAxis) {\n                            case \"x\": return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(proposedSplitStart, parentAABB.max.y, parentAABB.max.z);\n                            case \"y\": return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(parentAABB.max.x, proposedSplitStart, parentAABB.max.z);\n                            case \"z\": return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(parentAABB.max.x, parentAABB.max.y, proposedSplitStart);\n                            default:\n                                _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assert(false, \"Unknown BVH split direction.\");\n                                return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(0, 0, 0);\n                        }\n                    })();\n                    const leftMesh = mesh.filter(triangle => is_triangle_fully_inside_box(triangle, proposedLeftMin, proposedLeftMax));\n                    const rightMesh = mesh.filter(triangle => !is_triangle_fully_inside_box(triangle, proposedLeftMin, proposedLeftMax));\n                    const costOfSplit = (costNodeIntersection +\n                        (_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.aabb(leftMesh).volume() * leftMesh.length * costTriangleIntersection) +\n                        (_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.aabb(rightMesh).volume() * rightMesh.length * costTriangleIntersection));\n                    if (costOfSplit < lowestSplitCost) {\n                        lowestSplitCost = costOfSplit;\n                        leftMax = proposedLeftMax;\n                    }\n                }\n                return leftMax;\n            })();\n            const leftMesh = mesh.filter(triangle => is_triangle_fully_inside_box(triangle, leftMin, leftMax));\n            const rightMesh = mesh.filter(triangle => !is_triangle_fully_inside_box(triangle, leftMin, leftMax));\n            _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assert((leftMesh.length + rightMesh.length === mesh.length), \"Triangles have gone missing during BVH splitting.\");\n            parentAABB.mutable.left = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.aabb(leftMesh, Boolean(((depth + 1) >= maxDepth) || (leftMesh.length <= minNumTris)));\n            parentAABB.mutable.right = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.aabb(rightMesh, Boolean(((depth + 1) >= maxDepth) || (rightMesh.length <= minNumTris)));\n            split(parentAABB.mutable.left, leftMesh, depth + 1);\n            split(parentAABB.mutable.right, rightMesh, depth + 1);\n            function is_triangle_fully_inside_box(triangle, min, max) {\n                return triangle.vertices.every(vertex => {\n                    return Boolean(vertex.x >= min.x && vertex.x <= max.x &&\n                        vertex.y >= min.y && vertex.y <= max.y &&\n                        vertex.z >= min.z && vertex.z <= max.z);\n                });\n            }\n            ;\n        }\n    })(baseAABB, scene, 1);\n    const endTime = Date.now();\n    return {\n        base: baseAABB,\n        triangles: Object.freeze(scene),\n        constructTimeMs: (endTime - startTime),\n        num_triangles() {\n            return (function tri_count(aabb, total = 0) {\n                if (aabb.isLeaf) {\n                    return aabb.triangles.length;\n                }\n                else {\n                    return (total +\n                        tri_count(aabb.mutable.left, total) +\n                        tri_count(aabb.mutable.right, total));\n                }\n            })(baseAABB, 0);\n        },\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/bvh.ts?");

/***/ }),

/***/ "./src/wray/camera.ts":
/*!****************************!*\
  !*** ./src/wray/camera.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"camera\": () => (/* binding */ camera)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction camera(pos, axis, angle, viewPlane, fov = 20, antialiasing = false) {\n    return {\n        pos,\n        axis,\n        angle,\n        viewPlane,\n        fov,\n        antialiasing,\n        ray_toward_viewing_plane(x, y) {\n            let dir;\n            const aspectRatio = (viewPlane.width / viewPlane.height);\n            if (antialiasing) {\n                const r1 = Math.random();\n                const r2 = Math.random();\n                const rad = (0.49 * Math.sqrt(-Math.log(1 - r1)));\n                const angle = (2 * Math.PI * r2);\n                dir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((2 * ((x + 0.5 + rad * Math.cos(angle)) / viewPlane.width) - 1) * Math.tan(fov * Math.PI / 180) * aspectRatio, (1 - 2 * ((y + 0.5 + rad * Math.sin(angle)) / viewPlane.height)) * Math.tan(fov * Math.PI / 180), -1);\n            }\n            else {\n                const a = Math.tan(fov * (Math.PI / 180));\n                dir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((2 * ((x + 0.5) / viewPlane.width) - 1) * a * aspectRatio, (1 - (2 * ((y + 0.5) / viewPlane.height))) * a, -1);\n            }\n            dir = dir.normalized();\n            {\n                const cross = axis.cross(dir);\n                const dot = axis.dot(dir);\n                const cos = Math.cos(angle);\n                const sin = Math.sin(angle);\n                dir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(((dir.x * cos) + (cross.x * sin) + (axis.x * dot) * (1 - cos)), ((dir.y * cos) + (cross.y * sin) + (axis.y * dot) * (1 - cos)), ((dir.z * cos) + (cross.z * sin) + (axis.z * dot) * (1 - cos)));\n            }\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(pos, dir);\n        },\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/camera.ts?");

/***/ }),

/***/ "./src/wray/color.ts":
/*!***************************!*\
  !*** ./src/wray/color.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"color_rgb\": () => (/* binding */ color_rgb)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction color_rgb(red = 0.5, green = 0.5, blue = 0.5) {\n    return {\n        red,\n        green,\n        blue,\n        clamped(min = 0, max = 1) {\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(Math.max(Math.min(max, red), min), Math.max(Math.min(max, green), min), Math.max(Math.min(max, blue), min));\n        },\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/color.ts?");

/***/ }),

/***/ "./src/wray/debug.ts":
/*!***************************!*\
  !*** ./src/wray/debug.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assert\": () => (/* binding */ assert),\n/* harmony export */   \"warning\": () => (/* binding */ warning),\n/* harmony export */   \"error\": () => (/* binding */ error),\n/* harmony export */   \"alert\": () => (/* binding */ alert),\n/* harmony export */   \"log\": () => (/* binding */ log)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\nfunction assert(condition, failMessage) {\n    if (condition) {\n        return;\n    }\n    if (!_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assertionFailedFlag) {\n        Object.defineProperty(_wray__WEBPACK_IMPORTED_MODULE_0__.Wray, \"assertionFailedFlag\", { value: true, writable: false });\n        if (_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.in_window_thread()) {\n            alert(\"Wray assertion: \" + failMessage);\n            throw Error(\"Wray assertion: \" + failMessage);\n        }\n        else {\n            postMessage(_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.thread_message.assert(condition, failMessage));\n        }\n    }\n    else {\n        _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.error(\"Assertion failure (ignored): \" + failMessage);\n    }\n    return;\n}\nfunction warning(warningMessage) {\n    _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.log(warningMessage, \"warning\");\n}\nfunction error(errorMessage) {\n    _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.log(errorMessage, \"error\");\n}\nfunction alert(alertMessage) {\n    window.alert(`Wray: ${alertMessage}`);\n    _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.log(alertMessage, \"warning\");\n}\nfunction log(logMessage, messageType = \"log\") {\n    if (logMessage.length <= 0) {\n        _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.warning(\"Empty log messages are discouraged.\");\n        return;\n    }\n    if (_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.in_window_thread()) {\n        const logger_fn = (() => {\n            switch (messageType) {\n                default:\n                case \"log\": return console.log;\n                case \"warning\": return console.warn;\n                case \"error\": return console.error;\n            }\n        })();\n        logger_fn(`Wray: ${logMessage}`);\n    }\n    else {\n        postMessage(_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.thread_message.log(logMessage));\n    }\n}\n\n\n//# sourceURL=webpack:///./src/wray/debug.ts?");

/***/ }),

/***/ "./src/wray/material-emissive.ts":
/*!***************************************!*\
  !*** ./src/wray/material-emissive.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"emissive_material\": () => (/* binding */ emissive_material)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction emissive_material(intensity = 1, color = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(1, 1, 1)) {\n    return {\n        isEmissive: true,\n        color,\n        intensity,\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/material-emissive.ts?");

/***/ }),

/***/ "./src/wray/material-lambertian.ts":
/*!*****************************************!*\
  !*** ./src/wray/material-lambertian.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lambertian_material\": () => (/* binding */ lambertian_material)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction lambertian_material(color = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(0, 1, 1), albedo = 0.7) {\n    return {\n        isEmissive: false,\n        color,\n        albedo,\n        scatter(inRay = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(), surfaceNormal = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3()) {\n            const outRay = inRay.aimAt.random_in_hemisphere_cosine_weighted(surfaceNormal);\n            const brdf = surfaceNormal.dot(outRay.dir) * (albedo / Math.PI);\n            const pdf = (outRay.dir.dot(surfaceNormal) / Math.PI);\n            return { outRay, bsdf: brdf / pdf };\n        }\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/material-lambertian.ts?");

/***/ }),

/***/ "./src/wray/material-reflective.ts":
/*!*****************************************!*\
  !*** ./src/wray/material-reflective.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"reflective_material\": () => (/* binding */ reflective_material)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction reflective_material(color = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(0, 1, 1), reflectance = 1, albedo = 0.7) {\n    return {\n        isEmissive: false,\n        color,\n        reflectance,\n        albedo,\n        scatter(inRay = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(), surfaceNormal = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3()) {\n            return (Math.random() <= reflectance)\n                ? { outRay: inRay.aimAt.reflected(surfaceNormal), bsdf: 1 }\n                : _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.material.lambertian(color, albedo).scatter(inRay, surfaceNormal);\n        }\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/material-reflective.ts?");

/***/ }),

/***/ "./src/wray/material.ts":
/*!******************************!*\
  !*** ./src/wray/material.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"material\": () => (/* binding */ material)\n/* harmony export */ });\n/* harmony import */ var _material_lambertian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./material-lambertian */ \"./src/wray/material-lambertian.ts\");\n/* harmony import */ var _material_reflective__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material-reflective */ \"./src/wray/material-reflective.ts\");\n/* harmony import */ var _material_emissive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./material-emissive */ \"./src/wray/material-emissive.ts\");\n\n\n\n;\n;\nconst material = {\n    lambertian: _material_lambertian__WEBPACK_IMPORTED_MODULE_0__.lambertian_material,\n    reflective: _material_reflective__WEBPACK_IMPORTED_MODULE_1__.reflective_material,\n    emissive: _material_emissive__WEBPACK_IMPORTED_MODULE_2__.emissive_material,\n};\n\n\n//# sourceURL=webpack:///./src/wray/material.ts?");

/***/ }),

/***/ "./src/wray/matrix.ts":
/*!****************************!*\
  !*** ./src/wray/matrix.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"matrix44\": () => (/* binding */ matrix44)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nconst matrix44 = {\n    identity() {\n        return [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        ];\n    },\n    scale(x = 0, y = 0, z = 0) {\n        return [\n            x, 0, 0, 0,\n            0, y, 0, 0,\n            0, 0, z, 0,\n            0, 0, 0, 1\n        ];\n    },\n    translate(x = 0, y = 0, z = 0) {\n        return [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            x, y, z, 1\n        ];\n    },\n    rotate(x = 0, y = 0, z = 0) {\n        const mx = [\n            1, 0, 0, 0,\n            0, Math.cos(x), -Math.sin(x), 0,\n            0, Math.sin(x), Math.cos(x), 0,\n            0, 0, 0, 1\n        ];\n        const my = [\n            Math.cos(y), 0, -Math.sin(y), 0,\n            0, 1, 0, 0,\n            Math.sin(y), 0, Math.cos(y), 0,\n            0, 0, 0, 1\n        ];\n        const mz = [\n            Math.cos(z), -Math.sin(z), 0, 0,\n            Math.sin(z), Math.cos(z), 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        ];\n        const temp = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.matrix44.matrices_multiplied(my, mz);\n        return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.matrix44.matrices_multiplied(temp, mx);\n    },\n    perspective(fov = 0, aspectRatio = 0, zNear = 0, zFar = 0) {\n        const fovHalf = Math.tan(fov / 2);\n        const zRange = (zNear - zFar);\n        return [\n            (1 / (fovHalf * aspectRatio)), 0, 0, 0,\n            0, (1 / fovHalf), 0, 0,\n            0, 0, ((-zNear - zFar) / zRange), 1,\n            0, 0, (2 * zFar * (zNear / zRange)), 0\n        ];\n    },\n    screen_space(width = 0, height = 0) {\n        return [\n            (width / 2), 0, 0, 0,\n            0, -(height / 2), 0, 0,\n            0, 0, 1, 0,\n            (width / 2) - 0.5, (height / 2) - 0.5, 0, 1\n        ];\n    },\n    matrices_multiplied(m1, m2) {\n        const mResult = new Array(16);\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                mResult[i + (j * 4)] = (m1[i + (0 * 4)] * m2[0 + (j * 4)]) +\n                    (m1[i + (1 * 4)] * m2[1 + (j * 4)]) +\n                    (m1[i + (2 * 4)] * m2[2 + (j * 4)]) +\n                    (m1[i + (3 * 4)] * m2[3 + (j * 4)]);\n            }\n        }\n        return mResult;\n    },\n};\n\n\n//# sourceURL=webpack:///./src/wray/matrix.ts?");

/***/ }),

/***/ "./src/wray/pfm.ts":
/*!*************************!*\
  !*** ./src/wray/pfm.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pfm\": () => (/* binding */ pfm)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction pfm(width = 1, height = 1, pixelBuffer = [0.5, 0.5, 0.5], averageSampleCount = 1) {\n    _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assert((pixelBuffer.length == (width * height * 3)), \"Invalid pixel buffer size.\");\n    const type = \"PF\";\n    const isLittleEndian = true;\n    return {\n        width,\n        height,\n        pixels: Object.freeze(pixelBuffer),\n        type,\n        isLittleEndian,\n        averageSampleCount,\n        header() {\n            const endiannessSign = (isLittleEndian ? \"-\" : \"\");\n            const headerString = `${type}\\x0a${width} ${height}\\x0a${endiannessSign}${averageSampleCount}\\x0a`;\n            return Array.from(headerString).map(chr => chr.charCodeAt(0));\n        },\n        body() {\n            return pixelBuffer.reduce((pixelArray, pixel) => {\n                pixelArray.push(...new Uint8Array(new Float32Array([pixel]).buffer, 0, 4));\n                return pixelArray;\n            }, []);\n        },\n        data() {\n            return this.header().concat(this.body());\n        },\n        from_file: function (pfmFile) {\n            return new Promise((resolve, reject) => {\n                const fileReader = new FileReader();\n                fileReader.onloadend = () => {\n                    const pfmBinaryData = fileReader.result.split(\"\\x0a\");\n                    if (pfmBinaryData.length < 4) {\n                        reject(\"Malformed PFM file.\");\n                        return;\n                    }\n                    const pfmType = pfmBinaryData[0];\n                    const [pfmWidth, pfmHeight] = pfmBinaryData[1].split(\" \").map(v => Number(v));\n                    const pfmSamplesPerPixel = Math.abs(Number(pfmBinaryData[2]));\n                    const pfmIsLittleEndian = ((pfmBinaryData[2][0] || \"\") === \"-\");\n                    if (pfmType !== \"PF\") {\n                        reject(\"Only full-color PFM files are supported.\");\n                        return;\n                    }\n                    if (!pfmIsLittleEndian) {\n                        reject(\"Big-endian PFM files are not supported.\");\n                        return;\n                    }\n                    if ((pfmWidth < 0) || (pfmHeight < 0)) {\n                        reject(\"Invalid PFM image dimensions.\");\n                        return;\n                    }\n                    const pfmPixels = Array.from(pfmBinaryData.slice(3).join(\"\\x0a\"));\n                    const floatPixels = (() => {\n                        const convertedPixels = [];\n                        const numColorChannels = 3;\n                        for (let i = 0; i < (pfmWidth * pfmHeight * numColorChannels); i++) {\n                            const floatBytes = pfmPixels.slice((i * 4), ((i * 4) + 4)).map(p => p.charCodeAt(0));\n                            const uintRep = new Uint8Array(floatBytes);\n                            const floatRep = new Float32Array(uintRep.buffer);\n                            convertedPixels.push(floatRep[0]);\n                        }\n                        return convertedPixels;\n                    })();\n                    resolve(_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.pfm(pfmWidth, pfmHeight, floatPixels, pfmSamplesPerPixel));\n                };\n                fileReader.readAsBinaryString(pfmFile);\n            });\n        }\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/pfm.ts?");

/***/ }),

/***/ "./src/wray/ray.ts":
/*!*************************!*\
  !*** ./src/wray/ray.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ray\": () => (/* binding */ ray)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\nfunction ray(pos = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(0, 0, 0), dir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(0, 0, 1)) {\n    return {\n        pos,\n        dir,\n        aimAt: {\n            direction(direction = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3()) {\n                return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(pos, direction);\n            },\n            random_in_hemisphere(normal = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3()) {\n                let newDir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((Math.random() - Math.random()), (Math.random() - Math.random()), (Math.random() - Math.random())).normalized();\n                if (normal.dot(newDir) < 0) {\n                    newDir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((newDir.x * -1), (newDir.y * -1), (newDir.z * -1));\n                }\n                return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(pos, newDir);\n            },\n            random_in_hemisphere_cosine_weighted(normal = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3()) {\n                const rand1 = Math.random();\n                const rand2 = Math.random();\n                const r = Math.sqrt(rand1);\n                const theta = (2 * Math.PI * rand2);\n                const x = (r * Math.cos(theta));\n                const y = Math.sqrt(Math.max(0, 1 - rand1));\n                const z = (r * Math.sin(theta));\n                const t = (Math.abs(normal.x) > Math.abs(normal.y))\n                    ? _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(normal.z, 0, -normal.x).normalized()\n                    : _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(0, -normal.z, normal.y).normalized();\n                const b = normal.cross(t);\n                const newDir = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((x * b.x + y * normal.x + z * t.x), (x * b.y + y * normal.y + z * t.y), (x * b.z + y * normal.z + z * t.z)).normalized();\n                return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(pos, newDir);\n            },\n            reflected(normal = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3()) {\n                const dot = normal.dot(dir);\n                return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(pos, _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((2 * dot * normal.x - dir.x), (2 * dot * normal.y - dir.y), (2 * dot * normal.z - dir.z)).reversed());\n            },\n        },\n        step(stepSize, inDirection = dir) {\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.ray(_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((pos.x + (inDirection.x * stepSize)), (pos.y + (inDirection.y * stepSize)), (pos.z + (inDirection.z * stepSize))), dir);\n        },\n        intersect_triangle(triangle) {\n            const ray = this;\n            const noHit = [null, 0, 0];\n            const e1 = triangle.vertices[1].position.sub(triangle.vertices[0].position);\n            const e2 = triangle.vertices[2].position.sub(triangle.vertices[0].position);\n            const pv = ray.dir.cross(e2);\n            const det = e1.dot(pv);\n            if ((det > -_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.epsilon) && (det < _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.epsilon))\n                return noHit;\n            const invD = (1.0 / det);\n            const tv = ray.pos.sub(triangle.vertices[0].position);\n            const u = (tv.dot(pv) * invD);\n            if ((u < 0) || (u > 1))\n                return noHit;\n            const qv = tv.cross(e1);\n            const v = (ray.dir.dot(qv) * invD);\n            if ((v < 0) || ((u + v) > 1))\n                return noHit;\n            const distance = (e2.dot(qv) * invD);\n            if (distance <= 0)\n                return noHit;\n            return [distance, u, v];\n        },\n        intersect_aabb(aabb) {\n            const ray = this;\n            const dirX = (1 / ray.dir.x);\n            const dirY = (1 / ray.dir.y);\n            const dirZ = (1 / ray.dir.z);\n            const tx1 = ((aabb.min.x - ray.pos.x) * dirX);\n            const tx2 = ((aabb.max.x - ray.pos.x) * dirX);\n            let tmin = Math.min(tx1, tx2);\n            let tmax = Math.max(tx1, tx2);\n            const ty1 = ((aabb.min.y - ray.pos.y) * dirY);\n            const ty2 = ((aabb.max.y - ray.pos.y) * dirY);\n            tmin = Math.max(tmin, Math.min(ty1, ty2));\n            tmax = Math.min(tmax, Math.max(ty1, ty2));\n            const tz1 = ((aabb.min.z - ray.pos.z) * dirZ);\n            const tz2 = ((aabb.max.z - ray.pos.z) * dirZ);\n            tmin = Math.max(tmin, Math.min(tz1, tz2));\n            tmax = Math.min(tmax, Math.max(tz1, tz2));\n            return ((tmax >= 0) && (tmax >= tmin));\n        },\n        intersect_bvh(bvh) {\n            const ray = this;\n            ;\n            const intersectionInfo = {\n                triangle: null,\n                distance: Infinity,\n                u: 0,\n                v: 0,\n                w: 0,\n            };\n            (function trace(aabb) {\n                if (aabb.isLeaf) {\n                    for (const triangle of aabb.triangles) {\n                        const [distance, u, v] = ray.intersect_triangle(triangle);\n                        if ((distance !== null) && (distance < intersectionInfo.distance)) {\n                            intersectionInfo.triangle = triangle;\n                            intersectionInfo.distance = distance;\n                            intersectionInfo.u = u;\n                            intersectionInfo.v = v;\n                            intersectionInfo.w = (1 - u - v);\n                        }\n                    }\n                    return;\n                }\n                if (ray.intersect_aabb(aabb.mutable.left))\n                    trace(aabb.mutable.left);\n                if (ray.intersect_aabb(aabb.mutable.right))\n                    trace(aabb.mutable.right);\n            })(bvh.base);\n            return (intersectionInfo.triangle === null ? null : intersectionInfo);\n        },\n        trace(sceneBVH, depth = 0) {\n            const ray = this;\n            const intersected = ray.intersect_bvh(sceneBVH);\n            const material = intersected ? intersected.triangle.material : null;\n            {\n                if (!intersected)\n                    return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.sky.sampler(ray.dir);\n                if (material.isEmissive) {\n                    return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb((material.color.red * material.intensity), (material.color.green * material.intensity), (material.color.blue * material.intensity));\n                }\n                if (depth >= _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.maxRayDepth)\n                    return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(0, 0, 0);\n            }\n            {\n                const interpolatedNormal = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(((intersected.triangle.vertices[0].normal.x * intersected.w) +\n                    (intersected.triangle.vertices[1].normal.x * intersected.u) +\n                    (intersected.triangle.vertices[2].normal.x * intersected.v)), ((intersected.triangle.vertices[0].normal.y * intersected.w) +\n                    (intersected.triangle.vertices[1].normal.y * intersected.u) +\n                    (intersected.triangle.vertices[2].normal.y * intersected.v)), ((intersected.triangle.vertices[0].normal.z * intersected.w) +\n                    (intersected.triangle.vertices[1].normal.z * intersected.u) +\n                    (intersected.triangle.vertices[2].normal.z * intersected.v))).normalized();\n                const rayAtIntersection = ray.step(intersected.distance).step(_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.epsilon, intersected.triangle.faceNormal);\n                const { outRay, bsdf } = intersected.triangle.material.scatter(rayAtIntersection, interpolatedNormal);\n                const inLight = outRay.trace(sceneBVH, depth + 1);\n                return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(inLight.red * bsdf * material.color.red, inLight.green * bsdf * material.color.green, inLight.blue * bsdf * material.color.blue);\n            }\n        }\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/ray.ts?");

/***/ }),

/***/ "./src/wray/sky-cie-overcast.ts":
/*!**************************************!*\
  !*** ./src/wray/sky-cie-overcast.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sky_cie_overcast\": () => (/* binding */ sky_cie_overcast)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\nfunction sky_cie_overcast(zenithDirection = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(0, 1, 0), zenithLuminance = 1.3) {\n    return function (rayDir) {\n        const theta = (1 - zenithDirection.dot(rayDir));\n        const luminance = zenithLuminance * ((1 + 2 * Math.cos(theta)) / 3);\n        return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(luminance, luminance, luminance);\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/sky-cie-overcast.ts?");

/***/ }),

/***/ "./src/wray/sky-environment-map.ts":
/*!*****************************************!*\
  !*** ./src/wray/sky-environment-map.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sky_environment_map\": () => (/* binding */ sky_environment_map)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\nfunction sky_environment_map(zenithDirection, image) {\n    return function (rayDir) {\n        const [u, v] = (() => {\n            if (zenithDirection.y) {\n                return [\n                    (0.5 + Math.atan2(rayDir.x, rayDir.z) / (2 * Math.PI)),\n                    (0.5 - Math.asin(-rayDir.y) / Math.PI)\n                ];\n            }\n            else {\n                return [\n                    (0.5 + Math.atan2(rayDir.x, rayDir.y) / (2 * Math.PI)),\n                    (0.5 - Math.asin(-rayDir.z) / Math.PI)\n                ];\n            }\n        })();\n        const idx = ((~~(image.width * u) + ~~(image.height * v) * image.width) * 3);\n        const r = image.pixels[idx + 0];\n        const g = image.pixels[idx + 1];\n        const b = image.pixels[idx + 2];\n        return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(r, g, b);\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/sky-environment-map.ts?");

/***/ }),

/***/ "./src/wray/sky-solid-fill.ts":
/*!************************************!*\
  !*** ./src/wray/sky-solid-fill.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sky_solid_fill\": () => (/* binding */ sky_solid_fill)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\nfunction sky_solid_fill(r, g, b) {\n    return function () {\n        return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb(r, g, b);\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/sky-solid-fill.ts?");

/***/ }),

/***/ "./src/wray/sky.ts":
/*!*************************!*\
  !*** ./src/wray/sky.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sky\": () => (/* binding */ sky)\n/* harmony export */ });\n/* harmony import */ var _sky_cie_overcast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sky-cie-overcast */ \"./src/wray/sky-cie-overcast.ts\");\n/* harmony import */ var _sky_environment_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sky-environment-map */ \"./src/wray/sky-environment-map.ts\");\n/* harmony import */ var _sky_solid_fill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sky-solid-fill */ \"./src/wray/sky-solid-fill.ts\");\n\n\n\n;\n;\nconst sky = {\n    cie_overcast: _sky_cie_overcast__WEBPACK_IMPORTED_MODULE_0__.sky_cie_overcast,\n    environment_map: _sky_environment_map__WEBPACK_IMPORTED_MODULE_1__.sky_environment_map,\n    solid_fill: _sky_solid_fill__WEBPACK_IMPORTED_MODULE_2__.sky_solid_fill,\n    sampler: (0,_sky_solid_fill__WEBPACK_IMPORTED_MODULE_2__.sky_solid_fill)(1, 1, 1),\n};\n\n\n//# sourceURL=webpack:///./src/wray/sky.ts?");

/***/ }),

/***/ "./src/wray/surface.ts":
/*!*****************************!*\
  !*** ./src/wray/surface.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"surface\": () => (/* binding */ surface)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\n;\nfunction surface(width, height) {\n    _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assert((width > 0 && height > 0), \"Invalid width and/or height for the render surface.\");\n    const pixelBuffer = (new Array(width * height)).fill(null).map((element, idx) => ({\n        x: (idx % width),\n        y: Math.floor(idx / width),\n        red: 0,\n        green: 0,\n        blue: 0,\n        numSamples: 1,\n    }));\n    wipe_surface();\n    return {\n        width,\n        height,\n        pixelBuffer,\n        wipe: wipe_surface,\n        transferable_pixel_array() {\n            const pixelArray = new Float64Array(width * height * 4);\n            for (const pixel of pixelBuffer) {\n                const idx = ((pixel.x + pixel.y * width) * 4);\n                const surfacePixel = pixelBuffer[pixel.x + pixel.y * width];\n                pixelArray[idx + 0] = surfacePixel.red;\n                pixelArray[idx + 1] = surfacePixel.green;\n                pixelArray[idx + 2] = surfacePixel.blue;\n                pixelArray[idx + 3] = 1;\n            }\n            return {\n                pixelArray,\n                width,\n                height\n            };\n        },\n        average_sample_count: function () {\n            const sampleCounts = pixelBuffer.map(element => element.numSamples).sort();\n            return sampleCounts[Math.floor(sampleCounts.length / 2)];\n        },\n        accumulate_to_pixel_at: function (x = 0, y = 0, color = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.color_rgb()) {\n            const pixel = pixelBuffer[x + y * width];\n            _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assert((pixel != null), \"Detected an attempt to access an invalid element in the surface color buffer.\");\n            pixel.red += color.red;\n            pixel.green += color.green;\n            pixel.blue += color.blue;\n            pixel.numSamples++;\n        },\n    };\n    function wipe_surface() {\n        pixelBuffer.forEach((pixel) => {\n            pixel.red = 0;\n            pixel.green = 0;\n            pixel.blue = 0;\n            pixel.numSamples = 0;\n        });\n    }\n    ;\n}\n\n\n//# sourceURL=webpack:///./src/wray/surface.ts?");

/***/ }),

/***/ "./src/wray/thread-message.ts":
/*!************************************!*\
  !*** ./src/wray/thread-message.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"thread_message\": () => (/* binding */ thread_message)\n/* harmony export */ });\n;\n;\n;\nfunction thread_message_body(name, payload = {}) {\n    return {\n        name,\n        payload\n    };\n}\n;\nconst thread_message = {\n    log(string) { return thread_message_body(\"thread-log\", { string }); },\n    assert(condition, failMessage) { return thread_message_body(\"thread-assert\", { condition, failMessage }); },\n    to: {\n        marshal: {\n            render(durationMs) { return thread_message_body(\"marshal-render\", { durationMs }); },\n            assignRenderSettings(settings) { return thread_message_body(\"marshal-assign-render-settings\", settings); },\n            appendSamples(image) { return thread_message_body(\"marshal-append-pfm\", image); },\n            uploadRenderBuffer() { return thread_message_body(\"marshal-upload-render-buffer\"); },\n        },\n        worker: {\n            render(durationMs) { return thread_message_body(\"worker-render\", { durationMs }); },\n            setId(id) { return thread_message_body(\"worker-set-id\", { id }); },\n            assignRenderSettings(settings) { return thread_message_body(\"worker-assign-render-settings\", settings); },\n            uploadRenderBuffer() { return thread_message_body(\"worker-upload-render-buffer\"); },\n        },\n    },\n    from: {\n        marshal: {\n            threadInitialized() { return thread_message_body(\"marshal-thread-initialized\"); },\n            readyToRender() { return thread_message_body(\"marshal-ready-to-render\"); },\n            renderBuffer(renderBuffer) { return thread_message_body(\"marshal-render-buffer\", renderBuffer); },\n            workerInitializationFailed(why) { return thread_message_body(\"marshal-worker-initialization-failed\", { why }); },\n            renderingFailed(why) { return thread_message_body(\"marshal-rendering-failed\", { why }); },\n            renderingFinished(avgSamplesPerPixel, samplesPerSecond) { return thread_message_body(\"marshal-rendering-finished\", { avgSamplesPerPixel, samplesPerSecond }); },\n        },\n        worker: {\n            threadInitialized() { return thread_message_body(\"worker-thread-initialized\"); },\n            readyToRender(workerId) { return thread_message_body(\"worker-ready-to-render\", { workerId }); },\n            renderBuffer(workerId, renderBuffer) { return thread_message_body(\"worker-render-buffer\", Object.assign({ workerId }, renderBuffer)); },\n            renderingFailed(workerId, why) { return thread_message_body(\"worker-rendering-failed\", { workerId, why }); },\n            renderingFinished(workerId, avgSamplesPerPixel, samplesPerSecond) { return thread_message_body(\"worker-rendering-finished\", { workerId, avgSamplesPerPixel, samplesPerSecond }); },\n        },\n    },\n};\n\n\n//# sourceURL=webpack:///./src/wray/thread-message.ts?");

/***/ }),

/***/ "./src/wray/tonemapping-drago.ts":
/*!***************************************!*\
  !*** ./src/wray/tonemapping-drago.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drago_2003_tonemapping\": () => (/* binding */ drago_2003_tonemapping)\n/* harmony export */ });\nfunction drago_2003_tonemapping(pixelBuffer, imageWidth, imageHeight, { epsilon = 0.000001, exposure = 0, bias = 0.85, }) {\n    const contrastParam = 0;\n    const white = 1.0;\n    exposure = Math.pow(2, exposure);\n    const [maxLuminance, minLuminance, worldLuminance] = rgb_Yxy();\n    logmapping(maxLuminance, minLuminance, worldLuminance, bias, contrastParam, exposure, white);\n    Yxy_rgb();\n    function rgb_Yxy() {\n        let x, i;\n        let W, result = new Array(3);\n        let max, min;\n        let sum = 0.0;\n        let array_size = imageWidth * imageHeight;\n        const RGB2Yxy = [\n            [0.5141364, 0.3238786, 0.16036376],\n            [0.265068, 0.67023428, 0.06409157],\n            [0.0241188, 0.1228178, 0.84442666]\n        ];\n        max = epsilon;\n        min = Infinity;\n        for (x = 0; x < array_size; x++) {\n            result[0] = result[1] = result[2] = 0.;\n            for (i = 0; i < 3; i++) {\n                result[i] += RGB2Yxy[i][0] * pixelBuffer[x * 4];\n                result[i] += RGB2Yxy[i][1] * pixelBuffer[x * 4 + 1];\n                result[i] += RGB2Yxy[i][2] * pixelBuffer[x * 4 + 2];\n            }\n            if ((W = result[0] + result[1] + result[2]) > 0.) {\n                pixelBuffer[x * 4] = result[1];\n                pixelBuffer[x * 4 + 1] = result[0] / W;\n                pixelBuffer[x * 4 + 2] = result[1] / W;\n            }\n            else\n                pixelBuffer[x * 4] = pixelBuffer[x * 4 + 1] = pixelBuffer[x * 4 + 2] = 0.;\n            max = (max < pixelBuffer[x * 4]) ? pixelBuffer[x * 4] : max;\n            min = (min > pixelBuffer[x * 4]) ? pixelBuffer[x * 4] : min;\n            sum += Math.log(2.3e-5 + pixelBuffer[x * 4]);\n        }\n        return [max, min, (sum / (imageWidth * imageHeight))];\n    }\n    function Yxy_rgb() {\n        let x, i;\n        let result = new Array(3);\n        let X, Y, Z;\n        let array_size = imageWidth * imageHeight;\n        const Yxy2RGB = [\n            [2.5651, -1.1665, -0.3986],\n            [-1.0217, 1.9777, 0.0439],\n            [0.0753, -0.2543, 1.1892]\n        ];\n        for (x = 0; x < array_size; x++) {\n            Y = pixelBuffer[x * 4];\n            result[1] = pixelBuffer[x * 4 + 1];\n            result[2] = pixelBuffer[x * 4 + 2];\n            if ((Y > epsilon) && (result[1] > epsilon) && (result[2] > epsilon)) {\n                X = (result[1] * Y) / result[2];\n                Z = (X / result[1]) - X - Y;\n            }\n            else\n                X = Z = epsilon;\n            pixelBuffer[x * 4] = X;\n            pixelBuffer[x * 4 + 1] = Y;\n            pixelBuffer[x * 4 + 2] = Z;\n            result[0] = result[1] = result[2] = 0.;\n            for (i = 0; i < 3; i++) {\n                result[i] += Yxy2RGB[i][0] * pixelBuffer[x * 4];\n                result[i] += Yxy2RGB[i][1] * pixelBuffer[x * 4 + 1];\n                result[i] += Yxy2RGB[i][2] * pixelBuffer[x * 4 + 2];\n            }\n            pixelBuffer[x * 4] = result[0];\n            pixelBuffer[x * 4 + 1] = result[1];\n            pixelBuffer[x * 4 + 2] = result[2];\n        }\n    }\n    function logmapping(Lum_max, Lum_min, world_lum, biasParam, contParam, exposure, white) {\n        let Lmax, divider, av_lum, interpol, biasP;\n        let x, y, i, j, index;\n        let nrows, ncols;\n        let L;\n        let exp_adapt;\n        let Average;\n        let fast = 0;\n        nrows = imageHeight;\n        ncols = imageWidth;\n        if (!biasParam)\n            biasParam = 0.85;\n        exp_adapt = 1;\n        av_lum = Math.exp(world_lum) / exp_adapt;\n        biasP = Math.log(biasParam) / Math.log(0.5);\n        Lmax = Lum_max / av_lum;\n        divider = Math.log10(Lmax + 1);\n        if (!fast) {\n            for (x = 0; x < nrows; x++)\n                for (y = 0; y < ncols; y++) {\n                    index = x * ncols + y;\n                    if (contParam)\n                        pixelBuffer[index * 4] = Math.pow(pixelBuffer[index * 4], (1 / contParam));\n                    pixelBuffer[index * 4] /= av_lum;\n                    if (exposure != 1.0)\n                        pixelBuffer[index * 4] *= exposure;\n                    interpol = Math.log(2 + Math.pow((pixelBuffer[index * 4] / Lmax), biasP) * 8);\n                    pixelBuffer[index * 4] = ((Math.log(pixelBuffer[index * 4] + 1) / interpol) / divider);\n                }\n        }\n        else {\n            for (x = 0; x < nrows; x += 3)\n                for (y = 0; y < ncols; y += 3) {\n                    Average = 0.;\n                    for (i = 0; i < 3; i++)\n                        for (j = 0; j < 3; j++) {\n                            pixelBuffer[((x + i) * ncols + y + j) * 4] /= av_lum;\n                            if (exposure != 1.)\n                                pixelBuffer[((x + i) * ncols + y + j) * 4] *= exposure;\n                            Average += pixelBuffer[((x + i) * ncols + y + j) * 4];\n                        }\n                    Average = Average / 9 - pixelBuffer[(x * ncols + y) * 4];\n                    if (Average > -1 && Average < 1) {\n                        interpol =\n                            Math.log(2 + Math.pow(pixelBuffer[((x + 1) * ncols + y + 1) * 4] / Lmax, biasP) * 8);\n                        for (i = 0; i < 3; i++)\n                            for (j = 0; j < 3; j++) {\n                                index = (x + i) * ncols + y + j;\n                                if (pixelBuffer[index * 4] < 1) {\n                                    L = pixelBuffer[index * 4] * (6 + pixelBuffer[index * 4]) / (6 + 4 * pixelBuffer[index * 4]);\n                                    pixelBuffer[index * 4] = (L / interpol) / divider;\n                                }\n                                else if (pixelBuffer[index * 4] >= 1 && pixelBuffer[index * 4] < 2) {\n                                    L = pixelBuffer[index * 4] * (6 + 0.7662 * pixelBuffer[index * 4]) /\n                                        (5.9897 + 3.7658 * pixelBuffer[index * 4]);\n                                    pixelBuffer[index * 4] = (L / interpol) / divider;\n                                }\n                                else\n                                    pixelBuffer[index * 4] =\n                                        (Math.log(pixelBuffer[index * 4] + 1) / interpol) / divider;\n                            }\n                    }\n                    else {\n                        for (i = 0; i < 3; i++)\n                            for (j = 0; j < 3; j++) {\n                                interpol =\n                                    Math.log(2 + Math.pow(pixelBuffer[((x + i) * ncols + y + j) * 4] / Lmax, biasP) * 8);\n                                pixelBuffer[((x + i) * ncols + y + j) * 4] =\n                                    (Math.log(pixelBuffer[((x + i) * ncols + y + j) * 4] + 1) / interpol) / divider;\n                            }\n                    }\n                }\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/wray/tonemapping-drago.ts?");

/***/ }),

/***/ "./src/wray/tonemapping.ts":
/*!*********************************!*\
  !*** ./src/wray/tonemapping.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tonemappingModels\": () => (/* binding */ tonemappingModels)\n/* harmony export */ });\n/* harmony import */ var _tonemapping_drago__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tonemapping-drago */ \"./src/wray/tonemapping-drago.ts\");\n\n;\nconst tonemappingModels = {\n    drago_2003: _tonemapping_drago__WEBPACK_IMPORTED_MODULE_0__.drago_2003_tonemapping,\n};\n\n\n//# sourceURL=webpack:///./src/wray/tonemapping.ts?");

/***/ }),

/***/ "./src/wray/triangle.ts":
/*!******************************!*\
  !*** ./src/wray/triangle.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"triangle\": () => (/* binding */ triangle)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction triangle(vertices = [_wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vertex(), _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vertex(), _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vertex()], material = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.material.lambertian()) {\n    const faceNormal = (() => {\n        const e1 = vertices[1].position.sub(vertices[0].position);\n        const e2 = vertices[2].position.sub(vertices[0].position);\n        return e1.cross(e2).normalized();\n    })();\n    if (vertices.some(v => ((v.normal || null) === null))) {\n        vertices = (vertices.map(v => _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vertex(v.position, faceNormal)));\n    }\n    return {\n        vertices,\n        material,\n        faceNormal,\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/triangle.ts?");

/***/ }),

/***/ "./src/wray/ui.ts":
/*!************************!*\
  !*** ./src/wray/ui.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ui\": () => (/* binding */ ui)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction ui(container, callbacks) {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pixelSize = (Math.max(1, Math.min(128, ~~(urlParams.get(\"pixelSize\") || \"1\"))));\n    const resolution = (() => {\n        const userSuppliedValue = (urlParams.get(\"resolution\") || \"1280x720\").replace(/\\s+/g, \"\");\n        const [width, height] = userSuppliedValue.split(\"x\");\n        return {\n            width: ~~((~~Number(width) || 1280) / pixelSize),\n            height: ~~((~~Number(height) || 720) / pixelSize),\n        };\n    })();\n    const threadCount = (urlParams.get(\"threads\") || \"all\");\n    return {\n        settings: {\n            paused: false,\n            pixelSize: pixelSize,\n            resolution: resolution,\n            threadCount: threadCount,\n        },\n        container: container,\n        elements: {\n            statusContainer: null,\n            controlsContainerLeft: null,\n            controlsContainerRight: null,\n            status: null,\n            canvas: null,\n            pauseButton: null,\n            pauseButtonLabel: null,\n            pauseButtonContainer: null,\n            menuButtonContainer: null,\n            menuButton: null,\n            menu: null,\n        },\n        isVisible: false,\n        initialize: function () {\n            {\n                this.elements.canvas = document.createElement(\"canvas\");\n                this.elements.statusContainer = document.createElement(\"div\");\n                this.elements.controlsContainerLeft = document.createElement(\"div\");\n                this.elements.controlsContainerRight = document.createElement(\"div\");\n                this.elements.status = document.createElement(\"div\");\n                this.elements.pauseButton = document.createElement(\"i\");\n                this.elements.pauseButtonLabel = document.createElement(\"div\");\n                this.elements.pauseButtonContainer = document.createElement(\"div\");\n                this.elements.menuButtonContainer = document.createElement(\"div\");\n                this.elements.menuButton = document.createElement(\"i\");\n                this.elements.menu = document.createElement(\"div\");\n                _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.assert(Object.getOwnPropertyNames(this.elements).every((element) => (element !== null)), \"Invalid UI DOM elements!\");\n                this.elements.canvas.setAttribute(\"class\", \"canvas\");\n                this.elements.status.setAttribute(\"class\", \"status\");\n                this.elements.statusContainer.setAttribute(\"class\", \"status-container\");\n                this.elements.controlsContainerLeft.setAttribute(\"class\", \"controls-container left\");\n                this.elements.controlsContainerRight.setAttribute(\"class\", \"controls-container right\");\n                this.elements.pauseButton.setAttribute(\"class\", \"fas fa-fw fa-sm fa-pause\");\n                this.elements.pauseButtonLabel.setAttribute(\"class\", \"button-label\");\n                this.elements.pauseButtonContainer.setAttribute(\"class\", \"button pause\");\n                this.elements.menuButton.setAttribute(\"class\", \"fas fa-fw fa-sm fa-bars\");\n                this.elements.menuButtonContainer.setAttribute(\"class\", \"button menu\");\n                this.elements.menu.setAttribute(\"class\", \"dropdown-menu\");\n                this.container.appendChild(this.elements.canvas);\n                this.container.appendChild(this.elements.statusContainer);\n                {\n                    this.elements.statusContainer.appendChild(this.elements.status);\n                    this.elements.statusContainer.appendChild(this.elements.controlsContainerLeft);\n                    this.elements.statusContainer.appendChild(this.elements.controlsContainerRight);\n                    this.elements.controlsContainerRight.appendChild(this.elements.menuButtonContainer);\n                    this.elements.menuButtonContainer.appendChild(this.elements.menuButton);\n                    this.elements.controlsContainerRight.appendChild(this.elements.pauseButtonContainer);\n                    this.elements.pauseButtonContainer.appendChild(this.elements.pauseButtonLabel);\n                    this.elements.pauseButtonContainer.appendChild(this.elements.pauseButton);\n                    {\n                        this.elements.menuButtonContainer.appendChild(this.elements.menu);\n                        const savePFM = document.createElement(\"div\");\n                        savePFM.setAttribute(\"class\", \"dropdown-menu-element\");\n                        savePFM.appendChild(document.createTextNode(\"Save as PFM\"));\n                        this.elements.menu.appendChild(savePFM);\n                        const continueFromPFM = document.createElement(\"div\");\n                        continueFromPFM.setAttribute(\"class\", \"dropdown-menu-element\");\n                        continueFromPFM.appendChild(document.createTextNode(\"Continue from PFM...\"));\n                        this.elements.menu.appendChild(continueFromPFM);\n                        const fpmSelector = document.createElement(\"input\");\n                        fpmSelector.setAttribute(\"type\", \"file\");\n                        fpmSelector.setAttribute(\"accept\", \".pfm\");\n                        fpmSelector.onchange = () => {\n                            if (fpmSelector.files.length) {\n                                callbacks.load_pfm(fpmSelector.files[0]);\n                            }\n                            fpmSelector.value = \"\";\n                        };\n                        continueFromPFM.onclick = () => {\n                            this.close_menu();\n                            fpmSelector.click();\n                        };\n                        savePFM.onclick = () => {\n                            this.close_menu();\n                            callbacks.save_pfm();\n                        };\n                    }\n                }\n            }\n            {\n                this.elements.pauseButton.pressed = false;\n                this.redraw_pause_button();\n                this.elements.pauseButton.onclick = () => {\n                    this.settings.paused = !this.settings.paused;\n                    this.redraw_pause_button();\n                    this.close_menu();\n                    this.redraw_menu_button();\n                };\n            }\n            {\n                this.elements.menuButton.pressed = false;\n                this.redraw_menu_button();\n                this.elements.menuButton.onclick = () => {\n                    this.elements.menuButton.pressed = !this.elements.menuButton.pressed;\n                    this.redraw_menu_button();\n                };\n            }\n            return;\n        },\n        reveal: function () {\n            this.isVisible = true;\n            this.container.style.display = \"inline-block\";\n            this.container.animate([\n                { opacity: \"0\" },\n                { opacity: \"1\" }\n            ], {\n                duration: 50,\n                easing: \"ease\",\n            });\n        },\n        close_menu: function () {\n            this.elements.menuButton.pressed = false;\n            this.redraw_menu_button();\n        },\n        redraw_pause_button: function () {\n            this.elements.pauseButton.setAttribute(\"class\", this.settings.paused\n                ? \"fas fa-fw fa-sm fa-play\"\n                : \"fas fa-fw fa-sm fa-pause\");\n            this.elements.pauseButton.setAttribute(\"title\", this.settings.paused\n                ? \"Resume\"\n                : \"Pause\");\n            this.elements.pauseButtonLabel.textContent =\n                this.settings.paused\n                    ? \"Paused\"\n                    : \"\";\n        },\n        redraw_menu_button: function () {\n            this.elements.menuButtonContainer.style.visibility =\n                this.settings.paused\n                    ? \"hidden\"\n                    : \"visible\";\n            const isPressed = this.elements.menuButton.pressed;\n            this.elements.menuButton.setAttribute(\"class\", this.settings.paused\n                ? `fas fa-fw fa-sm fa-bars ${isPressed ? \"active\" : \"\"}`\n                : `fas fa-fw fa-sm fa-bars ${isPressed ? \"active\" : \"\"}`);\n            this.elements.menuButton.setAttribute(\"title\", this.settings.paused\n                ? \"Options\"\n                : \"Options\");\n            this.elements.menu.style.visibility =\n                isPressed\n                    ? \"visible\"\n                    : \"hidden\";\n        },\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/ui.ts?");

/***/ }),

/***/ "./src/wray/vector.ts":
/*!****************************!*\
  !*** ./src/wray/vector.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"vector3\": () => (/* binding */ vector3)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction vector3(x = 0, y = 0, z = 0) {\n    return {\n        x,\n        y,\n        z,\n        rotated_by_matrix(m44) {\n            const x0 = ((m44[0] * x) + (m44[4] * y) + (m44[8] * z));\n            const y0 = ((m44[1] * x) + (m44[5] * y) + (m44[9] * z));\n            const z0 = ((m44[2] * x) + (m44[6] * y) + (m44[10] * z));\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(x0, y0, z0);\n        },\n        sub(other) {\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((x - other.x), (y - other.y), (z - other.z));\n        },\n        cross(other) {\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(((y * other.z) - (z * other.y)), ((z * other.x) - (x * other.z)), ((x * other.y) - (y * other.x)));\n        },\n        dot(other) {\n            return ((x * other.x) + (y * other.y) + (z * other.z));\n        },\n        normalized() {\n            const sn = (Math.sqrt((x * x) + (y * y) + (z * z)) || 1);\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((x / sn), (y / sn), (z / sn));\n        },\n        scaled(scale) {\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3((x * scale.x), (y * scale.y), (z * scale.z));\n        },\n        reversed() {\n            return _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(-x, -y, -z);\n        }\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/vector.ts?");

/***/ }),

/***/ "./src/wray/vertex.ts":
/*!****************************!*\
  !*** ./src/wray/vertex.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"vertex\": () => (/* binding */ vertex)\n/* harmony export */ });\n/* harmony import */ var _wray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wray */ \"./src/wray/wray.ts\");\n\n;\nfunction vertex(position = _wray__WEBPACK_IMPORTED_MODULE_0__.Wray.vector3(), normal = null) {\n    return {\n        x: position.x,\n        y: position.y,\n        z: position.z,\n        position,\n        normal,\n    };\n}\n\n\n//# sourceURL=webpack:///./src/wray/vertex.ts?");

/***/ }),

/***/ "./src/wray/wray.ts":
/*!**************************!*\
  !*** ./src/wray/wray.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Wray\": () => (/* binding */ Wray)\n/* harmony export */ });\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ \"./src/wray/debug.ts\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color */ \"./src/wray/color.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector */ \"./src/wray/vector.ts\");\n/* harmony import */ var _vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vertex */ \"./src/wray/vertex.ts\");\n/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./matrix */ \"./src/wray/matrix.ts\");\n/* harmony import */ var _material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./material */ \"./src/wray/material.ts\");\n/* harmony import */ var _triangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./triangle */ \"./src/wray/triangle.ts\");\n/* harmony import */ var _camera__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./camera */ \"./src/wray/camera.ts\");\n/* harmony import */ var _surface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./surface */ \"./src/wray/surface.ts\");\n/* harmony import */ var _bvh__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bvh */ \"./src/wray/bvh.ts\");\n/* harmony import */ var _sky__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sky */ \"./src/wray/sky.ts\");\n/* harmony import */ var _ray__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ray */ \"./src/wray/ray.ts\");\n/* harmony import */ var _pfm__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./pfm */ \"./src/wray/pfm.ts\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui */ \"./src/wray/ui.ts\");\n/* harmony import */ var _tonemapping__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tonemapping */ \"./src/wray/tonemapping.ts\");\n/* harmony import */ var _thread_message__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./thread-message */ \"./src/wray/thread-message.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;\nfunction in_window_thread() {\n    return (typeof importScripts !== \"function\");\n}\nconst Wray = {\n    assertionFailedFlag: false,\n    epsilon: 0.000001,\n    maxRayDepth: 6,\n    in_window_thread,\n    assert: _debug__WEBPACK_IMPORTED_MODULE_0__.assert,\n    warning: _debug__WEBPACK_IMPORTED_MODULE_0__.warning,\n    error: _debug__WEBPACK_IMPORTED_MODULE_0__.error,\n    log: _debug__WEBPACK_IMPORTED_MODULE_0__.log,\n    alert: _debug__WEBPACK_IMPORTED_MODULE_0__.alert,\n    color_rgb: _color__WEBPACK_IMPORTED_MODULE_1__.color_rgb,\n    vector3: _vector__WEBPACK_IMPORTED_MODULE_2__.vector3,\n    vertex: _vertex__WEBPACK_IMPORTED_MODULE_3__.vertex,\n    ray: _ray__WEBPACK_IMPORTED_MODULE_11__.ray,\n    triangle: _triangle__WEBPACK_IMPORTED_MODULE_6__.triangle,\n    bvh: _bvh__WEBPACK_IMPORTED_MODULE_9__.bvh,\n    aabb: _bvh__WEBPACK_IMPORTED_MODULE_9__.aabb,\n    camera: _camera__WEBPACK_IMPORTED_MODULE_7__.camera,\n    surface: _surface__WEBPACK_IMPORTED_MODULE_8__.surface,\n    pfm: _pfm__WEBPACK_IMPORTED_MODULE_12__.pfm,\n    ui: _ui__WEBPACK_IMPORTED_MODULE_13__.ui,\n    sky: _sky__WEBPACK_IMPORTED_MODULE_10__.sky,\n    matrix44: _matrix__WEBPACK_IMPORTED_MODULE_4__.matrix44,\n    material: _material__WEBPACK_IMPORTED_MODULE_5__.material,\n    tonemappingModels: _tonemapping__WEBPACK_IMPORTED_MODULE_14__.tonemappingModels,\n    thread_message: _thread_message__WEBPACK_IMPORTED_MODULE_15__.thread_message,\n};\n\n\n//# sourceURL=webpack:///./src/wray/wray.ts?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module is referenced by other modules so it can't be inlined
/******/ var __webpack_exports__ = __webpack_require__("./src/wray/wray.ts");
/******/ var __webpack_exports__Wray = __webpack_exports__.Wray;
/******/ export { __webpack_exports__Wray as Wray };
/******/ 
